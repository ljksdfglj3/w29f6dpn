#!/bin/bash
# MySQL server (Debian)
 
$PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin"
source /etc/environment && export PATH

# Changes root password and sysadmin passwords
echo "myfavoratenameisalex" | passwd --stdin root
echo "myfavoratenameisdave" | passwd --stdin sysadmin
 
# Logs baseline information about the sever before configuration.
echo "Making baseline recording documents..."
mkdir /root/initial/
top > /root/initial/top.log
ps -aux > /root/initial/ps.log
netstat -nap > /root/initial/netstat.log
uptime > /root/initial/uptime.log
free -h > /root/initial/freemem.log
df -h > /root/initial/drivespace-beforebackup.log
iptables -L > /root/initial/iptables.log
 
# Make a backup of critical files of the system.
echo "Starting backup..."
mkdir /root/backup/
echo "Please enter the mySQL Root passwords."
mysqldump -u root -p frog > /root/backup/virtuemart.sql
mysqldump -u root -p roundcubemail -p > /etc/roundcubemail.sql
mysqldump -u root -p --all-databases > fullDb.sql
echo "MySQL backups done!"
cp -r /etc/ /root/backup/
cp -r /var/ /root/backup/
echo "Backup complete!" 

 
# Logs the size of the machine now that the drive backup has been done (since this will obviously increase the size of the drive).
df -h > /root/initial/drivespace-afterBackup.log

# Removes backdoor malware
mv /tmp/.ICE/.sys.so /tmp/.ICE/sys.so.BAK
crontab -r
kill -9 $(ps -ef | grep -i .sys.so | grep -v grep | awk '(print $2)')
 
 
# Disables IPv6
echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf
echo "net.ipv6.conf.lo.disable_ipv6 = 1" >> /etc/sysctl.conf
 
 
 
##### Setup Firewall rules #####
# Clear all existing rules
iptables -F
  
# Set default action to drop packets
iptables -P FORWARD DROP
iptables -P OUTPUT DROP
iptables -P INPUT DROP  

# Create table for blacklist
iptables -N BLACKLIST
iptables -A BLACKLIST -m recent --remove
iptables -A BLACKLIST -m recent --name blacklist --set
iptables -A BLACKLIST -j LOG --log-prefix "Blacklist Blocked: "
 
 #### Setup Localhost Rules ####
iptables -A INPUT -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT
 
#### Setup Services ####
# Allow all traffic already established
iptables -A INPUT -m conntrack --ctstate ESTABLISHED -j ACCEPT
iptables -A INPUT -m conntrack --ctstate RELATED -j ACCEPT
iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED -j ACCEPT
iptables -A OUTPUT -m conntrack --ctstate RELATED -j ACCEPT

# Alllow MySQL access
iptables -A INPUT -p tcp -s 172.20.241.30 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
iptables -A INPUT -p tcp -s 172.20.241.40 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -p tcp --sport 3306 -d 172.20.241.30 -m conntrack --ctstate ESTABLISHED -j ACCEPT
iptables -A OUTPUT -p tcp --sport 3306 -d 172.20.241.40 -m conntrack --ctstate ESTABLISHED -j ACCEPT
 
# Allow SSH access
iptables -A INPUT -p tcp --sport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -p tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT

# Allow port 8000 to Splunk WebGUI.
iptables -A OUTPUT -p tcp --dport 8000 -d 172.20.241.20 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
iptables -A INPUT -p tcp --sport 8000 -s 172.20.241.20 -m conntrack --ctstate ESTABLISHED -j ACCEPT


###### Allow traffic to apply patches, send logs, NTP, etc. ######
# Allow HTTP traffic.
iptables -A OUTPUT -p tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
iptables -A INPUT -p tcp --sport 80 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# Allow HTTPS traffic.
iptables -A OUTPUT -p tcp --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
iptables -A INPUT -p tcp --sport 443 -m conntrack --ctstate ESTABLISHED -j ACCEPT

# Allow DNS traffic.
iptables -A OUTPUT -p udp --dport 53 -j ACCEPT
iptables -A INPUT -p udp --sport 53 -j ACCEPT

# Allow NTP traffic.
iptables -A OUTPUT -p udp --dport 123 -d 172.20.242.200 -j ACCEPT
iptables -A INPUT -p udp --sport 123 -s 172.20.242.200 -j ACCEPT
 
# Allow syslog traffic.
iptables -A OUTPUT -p udp --dport 5014 -d 172.20.241.20 -j ACCEPT
iptables -A INPUT -p udp --sport 5014 -s 172.20.241.20 -j ACCEPT



####### Block the Zeus-Admin malware (I've decided to lock this down) #######
iptables -A OUTPUT -p tcp --sport 9090 -j DROP
iptables -A OUTPUT -p udp --sport 9090 -j DROP
iptables -A INPUT -p tcp --dport 9090 -j LOG --log-prefix "Attempted access to Zeus-Admin malware: "
iptables -A INPUT -p tcp --dport 9090 -j DROP
iptables -A INPUT -p udp --dport 9090 -j LOG --log-prefix "Attempted access to Zeus-Admin malware: "
iptables -A INPUT -p udp --dport 9090 -j DROP



####### Allow cautionary protocols with limits #######
# Allow ping with limits
iptables -A INPUT -p icmp -m limit --limit 3/second -j ACCEPT
iptables -A OUTPUT -p icmp -m limit --limit 3/second -j ACCEPT
iptables -A INPUT -p icmp -m limit --limit 1/minute -j LOG --log-prefix "Inbound ICMP Flood: "
iptables -A OUTPUT -p icmp -m limit --limit 1/minute -j LOG --log-prefix "Outbound ICMP Flood: "

# Prevent SYN packet attacks
iptables -A INPUT -p tcp -m state --state NEW -m limit --limit 2/second --limit-burst 2 -j ACCEPT
iptables -A INPUT -p tcp ! --syn -m state --state NEW -m limit --limit 2/second --limit-burst 2 -j LOG --log-prefix "Inbound SYN packet flood: "

# Prevent fragmented packets
iptables -A INPUT -f -m limit --limit 1/min -j LOG --log-prefix "Inbound Fragmented packet: "

# Prevent XMAS attacks
iptables -A INPUT -p tcp --tcp-flags ALL ALL -m limit --limit 1/min -j LOG --log-prefix "Inbound XMAS packet: "
iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP

# Prevent NULL attacks
iptables -A INPUT -p tcp --tcp-flags ALL NONE -m limit --limit 1/min -j LOG --log-prefix "Inbound NULL packet: "
iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP
 
## Remember all IP connections and send excessive requests to blacklist
iptables -A INPUT -m state --state NEW -m recent --set
iptables -A INPUT ! -s 172.20.240.0/22 -m recent --update --seconds 10 --hitcount 20 -j BLACKLIST

# Drop packets from blacklisted IP for 10 minutes.
iptables -A INPUT -m recent --rcheck --name blacklist --seconds 600 -j DROP

# Log everything else about to be dropped.
iptables -A OUTPUT -m limit --limit 2/min -j LOG --log-prefix "Output-Dropped: " --log-level 4
iptables -A OUTPUT -m limit --limit 2/min -j DROP
iptables -A INPUT -m limit --limit 2/min -j LOG --log-prefix "Input-Dropped: " --log-level 4
iptables -A INPUT -m limit --limit 2/min -j DROP
iptables -A FORWARD -m limit --limit 2/min -j LOG --log-prefix "Forward-Dropped: " --log-level 4
iptables -A FORWARD -m limit --limit 2/min -j DROP

# Save the filter rules.
/etc/init/iptables save
iptables-save > /etc/iptables
echo '#!/bin/sh' > /etc/network/if-pre-up.d/iptables
echo 'iptables-restore < /etc/iptables' >> /etc/network/if-pre-up.d/iptables
chmod +x /etc/network/if-pre-up.d/iptables
 
 
 
 
# Stops unnecessary services.
/etc/init.d/atd stop
/etc/init.d/bluetooth stop
/etc/init.d/cron stop
/etc/init.d/cups stop
/etc/init.d/nfs-common stop
/etc/init.d/portmap stop
/etc/init.d/postfix stop
/etc/init.d/pulseaudio stop
/etc/init.d/avahi-daemon stop
/etc/init.d/anacron stop
/etc/init.d/vsftpd stop
/etc/init.d/apache2 stop
 
# Remove iSCSI from network config.
mv /etc/network/if-up.d/mountnfs /etc/network
mv /etc/network/if-up.d/avahi-daemon /etc/network
mv /etc/network/if-up.d/postfix /etc/network
 
# Removes all cron and at jobs.
rm -rf /var/spool/cron/crontabs/*
rm -rf /var/spool/cron/atspool/*
rm -rf /var/spool/cron/atjobs/*
 
# Locks the shadow and id_rsa files.
chmod 0000 /etc/shadow
chmod 600 /root/.ssh/id_rsa
chmod 600 /home/sysadmin/.ssh/id_rsa

# Sets the service users to no login.
usermod -s /sbin/nologin mysql
usermod -s /sbin/nologin tomcat
usermod -s /sbin/nologin apache2
usermod -s /sbin/nologin httpd
usermod -s /sbin/nologin www-data
usermod -s /sbin/nologin postfix
usermod -s /sbin/nologin dovecot
usermod -s /sbin/nologin ntp


# Install the apt-transport-https package (allows package installation over https).
apt-get update
apt-get -y install apt-transport-https
 
# Changes the config file to what it should be.
echo "deb https://deb.debian.org/debian/ wheezy main non-free contrib" > /etc/apt/sources.list
echo "deb-src https://deb.debian.org/debian/ wheezy main non-free contrib" >> /etc/apt/sources.list
echo "deb https://deb.debian.org/debian-security wheezy/updates main non-free contrib" >> /etc/apt/sources.list
echo "deb-src https://deb.debian.org/debian-security wheezy/updates main non-free contrib" >> /etc/apt/sources.list
apt-get update


 # Removes Zeus-Admin Malware from systems by reinstalling init services.
apt-get -y install --reinstall upstart initscripts 
apt-get -y install claimav chkrootkit rkhunter
 
 
# Installs NTP server, configures it, and sets the server to be in the central timezone.
apt-get -y install ntp
echo "server 172.20.242.200 prefer" > /etc/ntp.conf
rm /etc/localtime
ln -s /usr/share/zoneinfo/America/Chicago /etc/localtime
 
# Restarts and starts NTPd service at system startup.
service ntp restart
service ntp start
 
# Forwards rsyslog to Splunk server.
apt-get -y upgrade rsyslog
echo '$ActionQueueType LinkedList' >> /etc/rsyslog.conf
echo '$ActionQueueFileName Forward1' >> /etc/rsyslog.conf
echo '$ActionResumeRetryCount -1' >> /etc/rsyslog.conf
echo '$ActionQueueSaveOnShutdown on' >> /etc/rsyslog.conf
echo '*.* @172.20.241.20:5014' >> /etc/rsyslog.conf
 
# Restarts rsyslog service.
service rsyslog restart
service rsyslog start
 
 
# Configures the DNS servers to resolve to multiple places.
echo "# Adds the team DNS servers." > /etc/resolv.conf
echo "nameserver 172.20.242.200" >> /etc/resolv.conf
echo "nameserver 172.20.242.10" >> /etc/resolv.conf
echo "# Adds outside DNS servers." >> /etc/resolv.conf
echo "nameserver 208.67.222.222" >> /etc/resolv.conf
echo "nameserver 208.67.220.220" >> /etc/resolv.conf
echo "nameserver 8.8.4.4" >> /etc/resolv.conf
echo "nameserver 8.8.8.8" >> /etc/resolv.conf

 
 
# Upgrade critical system packages.
apt-get -y upgrade mysql-server openssl iptables wget
 
# Run though the mysql_secure_installation.
mysql_secure_installation
 
# Set secure settings on the MySQL config file.
touch /etc/mysql/my.cnf
echo "general_log_file	= /var/log/mysql/mysql.log" >> /etc/mysql/my.cnf
echo "general_log	= 1" >> /etc/mysql/my.cnf
echo "log_slow_queries	= /var/log/mysql/mysql-slow.log" >> /etc/mysql/my.cnf
echo "long_query_time = 2" >> /etc/mysql/my.cnf
echo "log-queries-not-using-indexes" >> /etc/mysql/my.cnf

 
# Logs into MySQL as root and adjusts security settings.
echo "Please enter the MySQL root password: "
mysql -u root -p --execute="
DELETE FROM mysql.user WHERE user=' ' OR host='belle' OR host='127.0.0.1' OR host='%';
DELETE FROM mysql.user where user NOT IN ('root');
RENAME USER 'root'@'localhost' TO 'adam'@'localhost';
SET PASSWORD FOR 'adam'@'localhost' = PASSWORD('mynameisalex');
CREATE USER 'suse'@'172.20.241.30' IDENTIFIED BY 'thisroomissmall';
CREATE USER 'steve'@'172.20.241.40' IDENTIFIED BY 'SA!37fdh34h5j4h4';
grant SELECT, UPDATE, INSERT, DELETE on frog.* to 'suse'@'172.20.241.30';
grant SELECT, UPDATE, INSERT, DELETE on roundcubemail.* to 'steve'@'172.20.241.40';
flush privileges;
exit;"

# Ensures the MySQL data directory permissions are what they should be.
chown -R mysql:mysql /var/lib/mysql
chmod -R 750 /var/lib/mysql


# Restarts MySQL service.
service mysql restart
service mysql start

# Install Fail2Ban.
apt-get -y install fail2ban
 
# Configure Fail2Ban for mysql.
touch /etc/fail2ban/jail.local
echo "[mysqld-auth]" > /etc/fail2ban/jail.local
echo "enable = true" >> /etc/fail2ban/jail.local
echo "port = 3306" >> /etc/fail2ban/jail.local
echo "logpath = /var/log/mysql/mysql.log" >> /etc/fail2ban/jail.local
echo "filter = true" >> /etc/fail2ban/jail.local
echo "" >> /etc/fail2ban/jail.local

# Configure Fail2Ban for SSH.
echo "[sshd]" >> /etc/fail2ban/jail.local
echo "enable = true" >> /etc/fail2ban/jail.local
echo "" >> /etc/fail2ban/jail.local
echo "[sshd-ddos]" >> /etc/fail2ban/jail.local
echo "enable = true" >> /etc/fail2ban/jail.local
echo "" >> /etc/fail2ban/jail.local









# Installs Lynis security auditing scanner
sudo wget -O - https://packages.cisofy.com/keys/cisofy-software-public.key | sudo apt-key add -
echo "deb https://packages.cisofy.com/community/lynis/deb/ stable main" | sudo tee /etc/apt/sources.list.d/cisofy-lynis.list
apt-get update
apt-get -y install lynis
lynis update info
#Note: if you install using the default Debian repositories, then you'll need to do "lynis --check-all"
lynis --pentest


# Installs pam_cracklib (as per lynis recommendation which also makes some future injects easier).
apt-get -y install pam_cracklib
# Sets the password requirements so that they must all no older then 90 days. Will warn the user 7 days before expiring.
for i in $(awk -F':' '/\/home.*sh/ { print $1 }' /etc/passwd); do chage -m 0 -M 90 -W 7 $i; done


# Update "locate" database
updatedb
 
# Installs and configures ARPON in order to prevent Man-in-middle attacks.
apt-get -y install arpon
DAEMON_OPTS="-q -f /var/log/arpon/arpon.log -g -d" >> "/etc/default/arpon"
sed -i 's/no/yes/g' /etc/default/arpon /etc/default/arpon
service arpon restart
service arpon start
 
# Install auditd so that all actions are logged to syslog.
apt-get -y install auditd
sed -i 's/no/yes/g' /etc/audisp/plugins.d/syslog.conf /etc/audisp/plugins.d/syslog.conf
auditctl -w /etc/passwd -p wa -k password-file
auditctl -w /etc/shadow -p rwxa -k shadow-file
auditctl -w /etc/ssh -p wa
# Start auditd service.
/etc/init.d/auditd restart
/etc/init.d/auditd start 
 
 # Shows which other files have changed from the DEB files that exist in repositories.
apt-get -y install debsums
debsums -a -s > /root/initial/debsums.log

# Tells the user the script has finished.
echo "Script finished!"
echo "Please remember to check the MySQL server to see which users have access to which table(s)."
 
# Removes details as to what the script has done (although this might be unneeded).
history -c

# Exits the scripts.
exit
